DROP TABLE student;
CREATE TABLE student (
    student_id INT  AUTO_INCREMENT,
    name VARCHAR(20) NOT NULL,
    major VARCHAR (20),  
    PRIMARY KEY(student_id)
);

DESCRIBE student;

DROP TABLE student;

ALTER TABLE student ADD gpa DECIMAL(3,2);

ALTER TABLE student DROP COLUMN gpa;
SELECT * FROM student;#

UPDATE student
SET major = 'Bio'
WHERE major = 'Biology';

UPDATE student
SET major = 'Khem'
WHERE major = 'Chemistry';

UPDATE student
SET major = 'Bio'
WHERE student_id = '7';

UPDATE student
SET major = 'Biochemistry'
WHERE major = 'Bio' OR major = 'Khem';

UPDATE student
SET name = 'Tom', major = 'undecided'
WHERE student_id = 1;

UPDATE student
SET name =  major = 'undecided';

DELETE FROM student
WHERE student_id = 5;


SELECT * FROM student;



-- other comparison ops:
-- =   : equals
-- <>  : not equals
-- >   : greater than
-- <   : less than
-- >=  : greater than or wqual to
--<=   : less than or equal to

-- if there is not a subject for fozia, it will give it a null in a table

INSERT INTO student (name,major) VALUES('Jack', 'Biology');
INSERT INTO student (name,major) VALUES('Temi', 'Food Technology');
INSERT INTO student (name,major) VALUES('Michael', 'Mathematics');
INSERT INTO student (name,major) VALUES('Lance', 'Finance');
INSERT INTO student (name,major) VALUES('Jack', 'Biology');
INSERT INTO student (name,major) VALUES('Sun Mun', 'Chemistry');


-------------------------------------------------------------------
---- GRABBING INFORMATION


SELECT *
FROM student
ORDER BY major;

SELECT *
FROM student
ORDER BY student_id DESC;

SELECT *
FROM student
ORDER BY major, student_id
LIMIT 2;

SELECT *
FROM student
LIMIT 2;

SELECT *
FROM student
where major = 'Chemistry' OR major = 'Finance';


SELECT *
FROM student
where major <> 'Chemistry' AND name <>  'Temi';



SELECT *
FROM student
where name IN ('Jack', 'Lance', 'Michael') AND student_id > 4;

---------------------------------------------------------------
---- Creating company Database
DROP TABLE employee;


---here the branch table and the employee has not been assigned as a Foreign key yet 
-----this will be done later

----- Creating the employee table and the branch table 

CREATE TABLE employee (
  emp_id INT PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(40),
  birth_day DATE,
  sex VARCHAR(1),
  salary INT,
  super_id INT,
  branch_id INT
);


CREATE TABLE branch (
  branch_id INT PRIMARY KEY,
  branch_name VARCHAR(40),
  mgr_id INT,
  mgr_start_date DATE,
  FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL
);



---here the branch id and the super is are NOW being assinged as a foreign key

ALTER TABLE employee
ADD FOREIGN KEY(branch_id)
REFERENCES branch(branch_id)
ON DELETE SET NULL;

ALTER TABLE employee
ADD FOREIGN KEY(super_id)
REFERENCES employee(emp_id)
ON DELETE SET NULL;


--- here we are going to add the Client table
CREATE TABLE client (
  client_id INT PRIMARY KEY,
  client_name VARCHAR(40),
  branch_id INT,
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL
);

CREATE TABLE works_with (
  emp_id INT,
  client_id INT,
  total_sales INT,
  PRIMARY KEY(emp_id, client_id),
  FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON DELETE CASCADE,
  FOREIGN KEY(client_id) REFERENCES client(client_id) ON DELETE CASCADE
);


CREATE TABLE branch_supplier (
  branch_id INT,
  supplier_name VARCHAR(40),
  supply_type VARCHAR(40),
  PRIMARY KEY(branch_id, supplier_name),
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE
);


-- Corporate
INSERT INTO employee VALUES(100, 'David', 'Wallace', '1967-11-17', 'M', 250000, NULL, NULL);


--- in the ablove code, the Corporate branch has not been created yet, so we set it to 'NULL'


INSERT INTO branch VALUES(1, 'Corporate', 100, '2006-02-09');


--- here we are now inserting the corporate branch into the branch table

UPDATE employee
SET branch_id = 1
WHERE emp_id = 100;

INSERT INTO employee VALUES(101, 'Jan', 'Levinson', '1961-05-11', 'F', 110000, 100, 1);


-- Scranton
INSERT INTO employee VALUES(102, 'Michael', 'Scott', '1964-03-15', 'M', 75000, 100, NULL);

INSERT INTO branch VALUES(2, 'Scranton', 102, '1992-04-06');

UPDATE employee
SET branch_id = 2
WHERE emp_id = 102;

INSERT INTO employee VALUES(103, 'Angela', 'Martin', '1971-06-25', 'F', 63000, 102, 2);
INSERT INTO employee VALUES(104, 'Kelly', 'Kapoor', '1980-02-05', 'F', 55000, 102, 2);
INSERT INTO employee VALUES(105, 'Stanley', 'Hudson', '1958-02-19', 'M', 69000, 102, 2);


-- Stamford
INSERT INTO employee VALUES(106, 'Josh', 'Porter', '1969-09-05', 'M', 78000, 100, NULL);

INSERT INTO branch VALUES(3, 'Stamford', 106, '1998-02-13');

UPDATE employee
SET branch_id = 3
WHERE emp_id = 106;

INSERT INTO employee VALUES(107, 'Andy', 'Bernard', '1973-07-22', 'M', 65000, 106, 3);
INSERT INTO employee VALUES(108, 'Jim', 'Halpert', '1978-10-01', 'M', 71000, 106, 3);


-- BRANCH SUPPLIER
INSERT INTO branch_supplier VALUES(2, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Patriot Paper', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'J.T. Forms & Labels', 'Custom Forms');
INSERT INTO branch_supplier VALUES(3, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(3, 'Stamford Lables', 'Custom Forms');

-- CLIENT
INSERT INTO client VALUES(400, 'Dunmore Highschool', 2);
INSERT INTO client VALUES(401, 'Lackawana Country', 2);
INSERT INTO client VALUES(402, 'FedEx', 3);
INSERT INTO client VALUES(403, 'John Daly Law, LLC', 3);
INSERT INTO client VALUES(404, 'Scranton Whitepages', 2);
INSERT INTO client VALUES(405, 'Times Newspaper', 3);
INSERT INTO client VALUES(406, 'FedEx', 2);

-- WORKS_WITH
INSERT INTO works_with VALUES(105, 400, 55000);
INSERT INTO works_with VALUES(102, 401, 267000);
INSERT INTO works_with VALUES(108, 402, 22500);
INSERT INTO works_with VALUES(107, 403, 5000);
INSERT INTO works_with VALUES(108, 403, 12000);
INSERT INTO works_with VALUES(105, 404, 33000);
INSERT INTO works_with VALUES(107, 405, 26000);
INSERT INTO works_with VALUES(102, 406, 15000);
INSERT INTO works_with VALUES(105, 406, 130000);


select * from employee;


select * from works_with;


----- Querying data

----Find all employees
SELECT *
FROM employee;

SELECT * 
FROM client;

SELECT *
FROM employee
ORDER BY salary;


SELECT *
FROM employee
ORDER BY salary DESC;

--Find all employees ordered by sex then name
SELECT *
FROM employee
ORDER BY sex, first_name, last_name;

--Find the first 5 employees in the table
SELECT *
FROM employee
LIMIT 5;

--FIND THE FIRST AND LAST NAMES OF ALL EMPLOYEES
SELECT first_name, last_name
FROM employee;

--Find the forename and surnames of all employees
SELECT first_name as forename, last_name as surname
From employee;

--Find out all the different genders
SELECT DISTINCT sex
FROM employee;

SELECT DISTINCT branch_id
FROM employee;


---Find the number of employees
SELECT COUNT(emp_id)
FROM employee;


--Find how many employees have a supervisor
SELECT COUNT(super_id)
FROM employee;

--Find the number of female employees born after 1970
SELECT COUNT(emp_id)
FROM employee
WHERE sex = 'F' AND birth_day > '1971-01-01';

--Find the average of all employees salaries
SELECT AVG(salary)
From employee
WHERE sex = 'M';

--Find the sum of all employee salaries
SELECT SUM(salary)
FROM employee;

--------  AGGREGATION  -------
--Find out how many males nad femaler there are

SELECT COUNT(sex), sex
From employee
GROUP BY sex;


--Find the total sales of each salesman 
SELECT SUM(total_sales), emp_id
From works_with
GROUP BY emp_id;

--Find out how much each client spent

SELECT SUM(total_sales), client_id
From works_with
GROUP BY client_id;




---Find any client who are in LLC
---using WILDCARDS
--- the % sign stands for = any number of characters
----the _ sign stands for = one character
SELECT *
FROM client
WHERE client_name LIKE '%LLC%';


SELECT *
FROM client
WHERE client_name LIKE '%school%';

--Find any branch suppliers who are in the label business
SELECT *
FROM branch_supplier
WHERE supplier_name LIKE '%labels%';

--Find any employee born in october
SELECT *
FROM employee
WHERE birth_day LIKE '%____-10%';

----------           UNION       -----------------
--Find a list of employee and branch names
-- must have same number of columns 
--- must have same data type
SELECT first_name as Company_names
FROM employee
UNION
SELECT branch_name
FROM branch
UNION
SELECT client_name
FROM client;

-- Find a list of all clinets & branch suppliers' names
SELECT client_name, clinet.branch_id
FROM client
UNION
SELECT supplier_name, branch_supplier.branch_id
FROM branch_supplier;

--Find a list of all money spent or earned by the company
SELECT Salary 
FROM employee
UNION
SELECT total_sales
FROM works_with;

INSERT INTO branch VALUES(4, 'Buffalo', NULL, NULL);
SELECT *
FROM branch;

-----------------------------------------------
--------------JOINS----------------------------
--Find all branches and the name of the managers
SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
JOIN branch    -- LEFT JOIN, RIGHT JOIN
ON employee.emp_id = branch.mgr_id;    --only employees whose id are on the brancd id column will be joined and displayed.


--------------  Nested Queries  -------------------
--- Find names of all employees who have sold over 30,000
--- to a single client

SELECT works_with.emp_id
FROM works_with
WHERE total_sales > 30000;

SELECT employee.first_name, employee.last_name
FROM employee
WHERE employee.emp_id IN (
    SELECT works_with.emp_id
    FROM works_with 
    WHERE works_with.total_sales > 30000
);


-- Find all clients who are handled by the branch 
-- that Michael Scott manages
-- Assume you know Michael's ID

SELECT branch.branch_id
FROM branch
WHERE branch.mgr_id = 102;

SELECT client.client_name
FROM client
WHERE client.branch_id = (
    SELECT branch.branch_id
    FROM branch
    WHERE branch.mgr_id = 102
    limit 1
);

-- Find the names of employees who work with clients handled by the scranton branch
SELECT employee.first_name, employee.last_name
FROM employee
WHERE employee.emp_id IN (
                         SELECT works_with.emp_id
                         FROM works_with
                         )
AND employee.branch_id = 2;

-- Find the names of all clients who have spent more than 100,000 dollars
SELECT client.client_name
FROM client
WHERE client.client_id IN (
                          SELECT client_id
                          FROM (
                                SELECT SUM(works_with.total_sales) AS totals, client_id
                                FROM works_with
                                GROUP BY client_id) AS total_client_sales
                          WHERE totals > 100000
);

-------------- DELETE (ON DELETE SET NULL)/(ON DELETE CASCADE)--------------------------------
CREATE TABLE branch (
    branch_id INT PRIMARY KEY,
    branch_name VARCHAR(40),
    mgr_id INT,
    mgr_start_date DATE,
    FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL

);
-- the abou=ve code sets the mgr id to null becasue we have deleted michael scott
--- becasue 102 emp id has been deleted
DELETE FROM employee
WHERE emp_id = 102;

SELECT  * from employee;
SELECT  * from branch;

--------------------------- (ON DELETE CASCADE )  ------------

CREATE TABLE branch (
    branch_id INT PRIMARY KEY,
    branch_name VARCHAR(40),
    mgr_id INT,
    mgr_start_date DATE,
    FOREIGN KEY(branch_id) REFERENCES employee(branch_id) ON DELETE CASCADE

);

----------------------  TRIGGER ---------------------

CREATE TABLE trigger_test (
    message VARCHAR(100)
);


DELIMITER $$
CREATE
    TRIGGER my_trigger BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        INSERT INTO trigger_test VALUES ('added new employee');
    END$$
DELIMITER ;

INSERT INTO employee
VALUES (109, 'Oscar', 'Martinez', '1968-02-19', 'M', 69000, 106, 3);

SELECT * FROM trigger_test;

DELIMITER $$
CREATE
    TRIGGER my_trigger1 BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        INSERT INTO trigger_test VALUES (NEW.first_name);
    END$$
DELIMITER ;

INSERT INTO employee
VALUES(110, 'Kevin', 'Malone', '1978-02-19', 'M', 69000, 106, 3);

SELECT * FROM trigger_test;

DELIMITER $$
CREATE
    TRIGGER my_trigger2 BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        IF NEW.sex = 'M' THEN
            INSERT INTO trigger_test VALUES('added male employee');
        ELSEIF NEW.sex = 'F' THEN
            INSERT INTO trigger_test VALUES('added female');
        ELSE
            INSERT INTO trigger_test VALUES('added other employee');
        END IF;
    END$$
DELIMITER ;


INSERT INTO employee
VALUES(111, 'Jessica', 'Pearson', '1987-02-19', 'F', 69000, 106, 3);

SELECT * FROM trigger_test;
